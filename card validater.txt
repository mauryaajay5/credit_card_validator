#include<iostream>
#include <array>
#include <cmath>

using namespace std;

long long creditcard = 379354508162306;
int type;
int valid = 0;
array <int, 19> cardbits{};
int digits;
int length = log10(creditcard) + 1;
int sum;
int sum1;

void validate()
{
	if (valid == 1)
	{
		cout << "card is valid" << endl;
	}
	if (valid == 0)
	{
		cout << "card is invalid" << endl;
	}
	return;
}

// breaks up the card into individual digits that are then stored in an array
void cardbreakup()
{
	if (length < 13)
	{
		valid = 0;
		cout << "card number is too short" << endl;
	}
	cout << "card number: " << creditcard << endl;
	for (int i = 0; i < length; i++)
	{
		digits = creditcard % 10;
		creditcard /= 10;
		cardbits[i] = digits;
	}
}

// uses luhn algorithm to check if the card is valid
void cardcheck()
{
	for (int j = 1; j < length; j += 2)
	{
		cardbits[j] *= 2;
		if (cardbits[j] > 9)
		{
			int c = cardbits[j] % 10;
			int d = cardbits[j] /= 10;
			cardbits[j] = c + d;
		}
		sum += cardbits[j];
	}
	for (int k = 0; k < length; k += 2)
	{
		sum1 += cardbits[k];
	}
	sum += sum1;
	sum %= 10;
	if (sum == 0)
	{
		valid = 1;
	}
}

// checks for what kind of card it is
void cardtype()
{
	// could maybe do switch case here instead but I don't want to in this scenario
	if (cardbits[length - 1] == 4)
	{
		cout << "type: Visa Card" << endl;
		cardcheck();
	}
	if ((cardbits[length - 1] == 3) && (cardbits[length - 2] == 7))
	{
		cout << "type: American Express" << endl;
		cardcheck();
	}
	if (cardbits[length - 1] == 5)
	{
		cout << "type: Master Card" << endl;
		cardcheck();
	}
	if (cardbits[length - 1] == 6)
	{
		cout << "type: Discover Card" << endl;
		cardcheck();
	}
}

// runs all functions
int main()
{
	cardbreakup();
	cardtype();
	validate();
}












#include <stdio.h>
#include <iostream>
#include <string>

using namespace std;

bool isNumberString(const string& s) {
    int len = s.length();
    for (int i = 0; i < len; i++) {
        if (s[i] < '0' || s[i] > '9')
            return false;
    }
    return true;
}

int main() {
    string ccNumber;

    cout << "This program uses the Luhn Algorigthm to validate a CC number." << endl;
    cout << "You can enter 'exit' anytime to quit." << endl;

    while (true) {

        cout << "Please enter a CC number to validate: ";
        cin >> ccNumber;

        if (ccNumber == "exit")
            break;

        else if (!isNumberString(ccNumber)) {
            cout << "Bad input! ";
            continue;
        }

        int len = ccNumber.length();
        int doubleEvenSum = 0;

        // Step 1 is to double every second digit, starting from the right. If it
        // results in a two digit number, add both the digits to obtain a single
        // digit number. Finally, sum all the answers to obtain 'doubleEvenSum'.   

        for (int i = len - 2; i >= 0; i = i - 2) {
            int dbl = ((ccNumber[i] - 48) * 2);
            if (dbl > 9) {
                dbl = (dbl / 10) + (dbl % 10);
            }
            doubleEvenSum += dbl;
        }

        // Step 2 is to add every odd placed digit from the right to the value
        // 'doubleEvenSum'.

        for (int i = len - 1; i >= 0; i = i - 2) {
            doubleEvenSum += (ccNumber[i] - 48);
        }

        // Step 3 is to check if the final 'doubleEvenSum' is a multiple of 10.
        // If yes, it is a valid CC number. Otherwise, not.

        cout << (doubleEvenSum % 10 == 0 ? "Valid!" : "Invalid!") << endl;

        continue;        
    }

    return 0;
}
